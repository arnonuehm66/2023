<!DOCTYPE html>
<!-- saved from url=(0091)https://medium.com/@jatinkrmalik/day-12-hot-springs-advent-of-code-2023-python-77506773abfb -->
<html style="display: block;" lang="en" data-rh="lang"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="origin-trial" content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
<title>[Day 12] Hot Springs // Advent of Code 2023 (Python) | by Jatin K Malik | Medium</title>
<style>
html {
  margin: 0;
  padding: 0;
}
body {
  color: #111111;
  background-color: #f6f6f6;
  font-family: sans-serif;
  font-size: 1.3em;
  font-style: normal;
  font-weight: 400;
  line-height: 1.5;
  margin: 0 auto;
  padding: 40px 10px 80px;
  text-orientation: upright;
  transition:
    color 200ms cubic-bezier(0.4, 0, 1, 1),
    background-color 200ms cubic-bezier(0.4, 0, 1, 1);
}
body.vertical {
  margin: 40px auto 0;
  padding: 40px 60px 0;
  max-height: calc(100vh - 120px);
}
.entry-content * {
  max-width: 100%;
  line-height: inherit;
  vertical-align: baseline;
  background: transparent;
}
.entry-content p {
  margin: 1.5em 0;
}
body.vertical .entry-content p {
  margin: 0 1.5em;
}
h1 {
  font-size: 1.8em;
  line-height: 1.35;
}
h1, h2, h3, h4, h5, h6, b {
  font-weight: 700;
}
hr {
  border-style: solid;
  border-width: 0 0 0.5px 0.5px;
}
.byline,
.figcaption {
  font-style: italic;
}
.entry-content img {
  max-width: 100%;
  height: auto;
}
body.vertical .entry-content img {
  max-height: 100%;
  width: auto;
}
.entry-content code {
  font-weight: 500;
}
.entry-content pre {
  font-weight: 300;
  background-color: rgba(128, 128, 128, 0.05);
  border: 1px solid rgba(128, 128, 128, 0.1);
  white-space: pre-wrap;
  padding: 0.5em;
  margin: 1.5em 0;
}
.entry-content code, .entry-content pre {
  text-align: left;
  max-width: 100%;
  writing-mode: horizontal-tb;
  overflow: auto;
  white-space: pre-wrap;
}
body.vertical .entry-content pre {
  margin: 0 1.5em;
  max-width: 80%;
  max-height: 100%;
}
blockquote {
  border-left: 2px solid currentColor;
  padding-left: 1em;
  margin-left: 0;
}
blockquote p {
  font-style: italic;
}
iframe, textarea, input {
  display: none;
}

.entry-content img.wp-smiley,
.entry-content img.emoji {
  display: inline-block;
  border-width: 0;
  width: 1em;
  margin: 0 .07em;
  padding: 0;
}

.entry-content .visually-hidden,
.entry-content .visuallyhidden,
.entry-content .sr-only {
  display: inline-block;
  width: 1px;
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  border-width: 0;
}

.entry-content .caption,
.entry-content .wp-caption-text,
.entry-content figcaption {
  font-size: 0.9em;
  line-height: 1.48em;
  font-style: italic;
}
</style>
<script type="text/javascript" async="" charset="utf-8" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/recaptcha__en.js" crossorigin="anonymous" integrity="sha384-1qCnjZ4tqdtwUnG8/biz1OfJ7vkM3jnPZ0W0wIcDu+NDwZyQHqHpscJVB8ezdlTM"></script><script async="" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/branch-latest.min.js"></script><link rel="icon" href="https://miro.medium.com/v2/1*m-R_BkNf1Qjr1YbyOIJY2w.png" data-rh="true"><link rel="search" type="application/opensearchdescription+xml" title="Medium" href="https://medium.com/osd.xml" data-rh="true"><link rel="apple-touch-icon" sizes="152x152" href="https://miro.medium.com/v2/resize:fill:152:152/1*sHhtYhaCe2Uc3IU0IgKwIQ.png" data-rh="true"><link rel="apple-touch-icon" sizes="120x120" href="https://miro.medium.com/v2/resize:fill:120:120/1*sHhtYhaCe2Uc3IU0IgKwIQ.png" data-rh="true"><link rel="apple-touch-icon" sizes="76x76" href="https://miro.medium.com/v2/resize:fill:76:76/1*sHhtYhaCe2Uc3IU0IgKwIQ.png" data-rh="true"><link rel="apple-touch-icon" sizes="60x60" href="https://miro.medium.com/v2/resize:fill:60:60/1*sHhtYhaCe2Uc3IU0IgKwIQ.png" data-rh="true"><link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/Medium-Avatar-500x500.svg" color="#171717" data-rh="true"><link rel="preconnect" href="https://glyph.medium.com/" crossorigin="" data-rh="true"><link id="glyph_preload_link" rel="preload" as="style" type="text/css" href="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/unbound.css" data-rh="true"><link id="glyph_link" rel="stylesheet" type="text/css" href="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/unbound.css" data-rh="true"><link rel="author" href="https://medium.com/@jatinkrmalik" data-rh="true"><link rel="canonical" href="https://medium.com/@jatinkrmalik/day-12-hot-springs-advent-of-code-2023-python-77506773abfb" data-rh="true"><link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/77506773abfb" data-rh="true"><meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1,maximum-scale=1" data-rh="true"><meta name="theme-color" content="#000000" data-rh="true"><meta name="twitter:app:name:iphone" content="Medium" data-rh="true"><meta name="twitter:app:id:iphone" content="828256236" data-rh="true"><meta property="al:ios:app_name" content="Medium" data-rh="true"><meta property="al:ios:app_store_id" content="828256236" data-rh="true"><meta property="al:android:package" content="com.medium.reader" data-rh="true"><meta property="fb:app_id" content="542599432471018" data-rh="true"><meta property="og:site_name" content="Medium" data-rh="true"><meta property="og:type" content="article" data-rh="true"><meta property="article:published_time" content="2023-12-19T14:46:59.958Z" data-rh="true"><meta name="title" content="[Day 12] Hot Springs // Advent of Code 2023 (Python) | by Jatin K Malik | Medium" data-rh="true"><meta property="og:title" content="[Day 12] Hot Springs // Advent of Code 2023 (Python)" data-rh="true"><meta property="al:android:url" content="medium://p/77506773abfb" data-rh="true"><meta property="al:ios:url" content="medium://p/77506773abfb" data-rh="true"><meta property="al:android:app_name" content="Medium" data-rh="true"><meta name="description" content="What a masterclass in how to drastically reduce the search space when dealing with O(2^n) time and space complexity!" data-rh="true"><meta property="og:description" content="You finally reach the hot springs! You can see steam rising from secluded areas attached to the primary, ornate building…." data-rh="true"><meta property="og:url" content="https://medium.com/@jatinkrmalik/day-12-hot-springs-advent-of-code-2023-python-77506773abfb" data-rh="true"><meta property="al:web:url" content="https://medium.com/@jatinkrmalik/day-12-hot-springs-advent-of-code-2023-python-77506773abfb" data-rh="true"><meta property="og:image" content="https://miro.medium.com/v2/da:true/resize:fit:1200/0*2qyq_T4PoQxHVYw9" data-rh="true"><meta property="article:author" content="https://medium.com/@jatinkrmalik" data-rh="true"><meta name="author" content="Jatin K Malik" data-rh="true"><meta name="robots" content="index,follow,max-image-preview:large" data-rh="true"><meta name="referrer" content="unsafe-url" data-rh="true"><meta property="twitter:title" content="[Day 12] Hot Springs // Advent of Code 2023 (Python)" data-rh="true"><meta name="twitter:site" content="@Medium" data-rh="true"><meta name="twitter:app:url:iphone" content="medium://p/77506773abfb" data-rh="true"><meta property="twitter:description" content="You finally reach the hot springs! You can see steam rising from secluded areas attached to the primary, ornate building…." data-rh="true"><meta name="twitter:image:src" content="https://miro.medium.com/v2/da:true/resize:fit:1200/0*2qyq_T4PoQxHVYw9" data-rh="true"><meta name="twitter:card" content="summary_large_image" data-rh="true"><meta name="twitter:creator" content="@jatinkrmalik" data-rh="true"><meta name="twitter:label1" content="Reading time" data-rh="true"><meta name="twitter:data1" content="14 min read" data-rh="true"><script type="application/ld+json" data-rh="true">{"@context":"http:\u002F\u002Fschema.org","@type":"NewsArticle","image":["https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fda:true\u002Fresize:fit:1200\u002F0*2qyq_T4PoQxHVYw9"],"url":"https:\u002F\u002Fmedium.com\u002F@jatinkrmalik\u002Fday-12-hot-springs-advent-of-code-2023-python-77506773abfb","dateCreated":"2023-12-19T14:46:59.958Z","datePublished":"2023-12-19T14:46:59.958Z","dateModified":"2023-12-19T14:55:33.822Z","headline":"[Day 12] Hot Springs \u002F\u002F Advent of Code 2023 (Python)","name":"[Day 12] Hot Springs \u002F\u002F Advent of Code 2023 (Python)","description":"What a masterclass in how to drastically reduce the search space when dealing with O(2^n) time and space complexity!","identifier":"77506773abfb","author":{"@type":"Person","name":"Jatin K Malik","url":"https:\u002F\u002Fmedium.com\u002F@jatinkrmalik"},"creator":["Jatin K Malik"],"publisher":{"@type":"Organization","name":"Medium","url":"https:\u002F\u002Fmedium.com\u002F","logo":{"@type":"ImageObject","width":308,"height":60,"url":"https:\u002F\u002Fmiro.medium.com\u002Fv2\u002Fresize:fit:308\u002F1*OMF3fSqH8t4xBJ9-6oZDZw.png"}},"mainEntityOfPage":"https:\u002F\u002Fmedium.com\u002F@jatinkrmalik\u002Fday-12-hot-springs-advent-of-code-2023-python-77506773abfb"}</script><script async="true" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/js" data-rh="true"></script><script data-rh="true">window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());

            gtag('config', 'G-7JY7T788PK');</script><script type="text/javascript" data-rh="true">(function(b,r,a,n,c,h,_,s,d,k){if(!b[n]||!b[n]._q){for(;s<_.length;)c(h,_[s++]);d=r.createElement(a);d.async=1;d.src="https://cdn.branch.io/branch-latest.min.js";k=r.getElementsByTagName(a)[0];k.parentNode.insertBefore(d,k);b[n]=h}})(window,document,"script","branch",function(b,r){b[r]=function(){b._q.push([r,arguments])}},{_q:[],_v:1},"addListener applyCode autoAppIndex banner closeBanner closeJourney creditHistory credits data deepview deepviewCta first getCode init link logout redeem referrals removeListener sendSMS setBranchViewData setIdentity track validateCode trackCommerceEvent logEvent".split(" "), 0);
branch.init('key_live_ofxXr2qTrrU9NqURK8ZwEhknBxiI6KBm', {metadata: {}, 'no_journeys': true, 'disable_exit_animation': true, 'disable_entry_animation': true, 'tracking_disabled': null}, function(err, data) {});</script><script src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/enterprise.js" data-rh="true"></script><style id="googleidentityservice_button_styles">.qJTHM{-webkit-user-select:none;color:#202124;direction:ltr;-webkit-touch-callout:none;font-family:"Roboto-Regular",arial,sans-serif;-webkit-font-smoothing:antialiased;font-weight:400;margin:0;overflow:hidden;-webkit-text-size-adjust:100%}.ynRLnc{left:-9999px;position:absolute;top:-9999px}.L6cTce{display:none}.bltWBb{word-break:break-all}.hSRGPd{color:#1a73e8;cursor:pointer;font-weight:500;text-decoration:none}.Bz112c-W3lGp{height:16px;width:16px}.Bz112c-E3DyYd{height:20px;width:20px}.Bz112c-r9oPif{height:24px;width:24px}.Bz112c-uaxL4e{-webkit-border-radius:10px;border-radius:10px}.LgbsSe-Bz112c{display:block}.S9gUrf-YoZ4jf,.S9gUrf-YoZ4jf *{border:none;margin:0;padding:0}.fFW7wc-ibnC6b>.aZ2wEe>div{border-color:#4285f4}.P1ekSe-ZMv3u>div:nth-child(1){background-color:#1a73e8!important}.P1ekSe-ZMv3u>div:nth-child(2),.P1ekSe-ZMv3u>div:nth-child(3){background-image:linear-gradient(to right,rgba(255,255,255,.7),rgba(255,255,255,.7)),linear-gradient(to right,#1a73e8,#1a73e8)!important}.haAclf{display:inline-block}.nsm7Bb-HzV7m-LgbsSe{-webkit-border-radius:4px;border-radius:4px;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-transition:background-color .218s,border-color .218s;transition:background-color .218s,border-color .218s;-webkit-user-select:none;-webkit-appearance:none;background-color:#fff;background-image:none;border:1px solid #dadce0;color:#3c4043;cursor:pointer;font-family:"Google Sans",arial,sans-serif;font-size:14px;height:40px;letter-spacing:0.25px;outline:none;overflow:hidden;padding:0 12px;position:relative;text-align:center;vertical-align:middle;white-space:nowrap;width:auto}@media screen and (-ms-high-contrast:active){.nsm7Bb-HzV7m-LgbsSe{border:2px solid windowText;color:windowText}}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe{font-size:14px;height:32px;letter-spacing:0.25px;padding:0 10px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe{font-size:11px;height:20px;letter-spacing:0.3px;padding:0 8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe{padding:0;width:40px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe{width:32px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe{width:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK{-webkit-border-radius:20px;border-radius:20px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.pSzOP-SxQuSe{-webkit-border-radius:16px;border-radius:16px}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK.purZT-SxQuSe{-webkit-border-radius:10px;border-radius:10px}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc{border:none;color:#fff}.nsm7Bb-HzV7m-LgbsSe.MFS4be-v3pZbf-Ia7Qfc{background-color:#1a73e8}.nsm7Bb-HzV7m-LgbsSe.MFS4be-JaPV2b-Ia7Qfc{background-color:#202124;color:#e8eaed}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:18px;margin-right:8px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:14px;min-width:14px;width:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{height:10px;min-width:10px;width:10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin-left:8px;margin-right:-4px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:10px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:8px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c{padding:4px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:3px;border-top-left-radius:3px;-webkit-border-bottom-left-radius:3px;border-bottom-left-radius:3px;display:-webkit-box;display:-webkit-flex;display:flex;justify-content:center;-webkit-align-items:center;align-items:center;background-color:#fff;height:36px;margin-left:-10px;margin-right:12px;min-width:36px;width:36px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c,.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf .nsm7Bb-HzV7m-LgbsSe-Bz112c{margin:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:28px;margin-left:-8px;margin-right:10px;min-width:28px;width:28px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{height:16px;margin-left:-6px;margin-right:8px;min-width:16px;width:16px}.nsm7Bb-HzV7m-LgbsSe.Bz112c-LgbsSe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:3px;border-radius:3px;margin-left:2px;margin-right:0;padding:0}.nsm7Bb-HzV7m-LgbsSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.nsm7Bb-HzV7m-LgbsSe.pSzOP-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:14px;border-radius:14px}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:8px;border-radius:8px}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-bN97Pc-sM5MNb{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;-webkit-flex-direction:row;flex-direction:row;justify-content:space-between;-webkit-flex-wrap:nowrap;flex-wrap:nowrap;height:100%;position:relative;width:100%}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX{justify-content:center}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:1;flex-grow:1;font-family:"Google Sans",arial,sans-serif;font-weight:500;overflow:hidden;text-overflow:ellipsis;vertical-align:top}.nsm7Bb-HzV7m-LgbsSe.purZT-SxQuSe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-weight:300}.nsm7Bb-HzV7m-LgbsSe .oXtfBe-l4eHX .nsm7Bb-HzV7m-LgbsSe-BPrWId{-webkit-flex-grow:0;flex-grow:0}.nsm7Bb-HzV7m-LgbsSe .nsm7Bb-HzV7m-LgbsSe-MJoBVe{-webkit-transition:background-color .218s;transition:background-color .218s;bottom:0;left:0;position:absolute;right:0;top:0}.nsm7Bb-HzV7m-LgbsSe:hover,.nsm7Bb-HzV7m-LgbsSe:focus{-webkit-box-shadow:none;box-shadow:none;border-color:#d2e3fc;outline:none}.nsm7Bb-HzV7m-LgbsSe:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.04)}.nsm7Bb-HzV7m-LgbsSe:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(66,133,244,.1)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:hover .nsm7Bb-HzV7m-LgbsSe-MJoBVe,.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:focus .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.24)}.nsm7Bb-HzV7m-LgbsSe.MFS4be-Ia7Qfc:active .nsm7Bb-HzV7m-LgbsSe-MJoBVe{background:rgba(255,255,255,.32)}.nsm7Bb-HzV7m-LgbsSe .n1UuX-DkfjY{-webkit-border-radius:50%;border-radius:50%;display:-webkit-box;display:-webkit-flex;display:flex;height:20px;margin-left:-4px;margin-right:8px;min-width:20px;width:20px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId{font-family:"Roboto";font-size:12px;text-align:left}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .ssJRIf,.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .fmcmS{overflow:hidden;text-overflow:ellipsis}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-align-items:center;align-items:center;color:#5f6368;fill:#5f6368;font-size:11px;font-weight:400}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.MFS4be-Ia7Qfc .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff{color:#e8eaed;fill:#e8eaed}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-BPrWId .K4efff .Bz112c{height:18px;margin:-3px -3px -3px 2px;min-width:18px;width:18px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-top-left-radius:0;border-top-left-radius:0;-webkit-border-bottom-left-radius:0;border-bottom-left-radius:0;-webkit-border-top-right-radius:3px;border-top-right-radius:3px;-webkit-border-bottom-right-radius:3px;border-bottom-right-radius:3px;margin-left:12px;margin-right:-10px}.nsm7Bb-HzV7m-LgbsSe.jVeSEe.JGcpL-RbRzK .nsm7Bb-HzV7m-LgbsSe-Bz112c-haAclf{-webkit-border-radius:18px;border-radius:18px}.L5Fo6c-sM5MNb{border:0;display:block;left:0;position:relative;top:0}.L5Fo6c-bF1uUb{-webkit-border-radius:4px;border-radius:4px;bottom:0;cursor:pointer;left:0;position:absolute;right:0;top:0}.L5Fo6c-bF1uUb:focus{border:none;outline:none}sentinel{}</style><link id="googleidentityservice" type="text/css" media="all" rel="stylesheet" href="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/style"></head><body style="background-color: rgb(246, 246, 246); color: rgb(34, 34, 34); font-family: sans-serif; font-size: 1.3em; line-height: 1.5; writing-mode: unset; max-width: 64ch; height: unset;">
<h1>[Day 12] Hot Springs // Advent of Code 2023 (Python)</h1><p class="byline">Jatin K Malik —  Read time: 12 minutes</p><hr>
<article class="entry-content" dir="auto"><div class="page" id="readability-page-1"><article><div><div><div><a href="https://medium.com/@jatinkrmalik?source=post_page-----77506773abfb--------------------------------" rel="noopener follow" style="color: rgb(76, 112, 240);"><div aria-labelledby="1" aria-describedby="1" aria-hidden="false"><p><img data-testid="authorPhoto" loading="lazy" height="44" width="44" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/2_9w8uaQp8uqA5wtRu-DltrQ.png" alt="Jatin K Malik"></p></div></a></div><div><figure><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 1400px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/0*2qyq_T4PoQxHVYw9 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/0*2qyq_T4PoQxHVYw9 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/0*2qyq_T4PoQxHVYw9 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/0*2qyq_T4PoQxHVYw9 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/0*2qyq_T4PoQxHVYw9 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/0*2qyq_T4PoQxHVYw9 1100w, https://miro.medium.com/v2/resize:fit:2800/format:webp/0*2qyq_T4PoQxHVYw9 2800w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 1400px" srcset="https://miro.medium.com/v2/resize:fit:640/0*2qyq_T4PoQxHVYw9 640w, https://miro.medium.com/v2/resize:fit:720/0*2qyq_T4PoQxHVYw9 720w, https://miro.medium.com/v2/resize:fit:750/0*2qyq_T4PoQxHVYw9 750w, https://miro.medium.com/v2/resize:fit:786/0*2qyq_T4PoQxHVYw9 786w, https://miro.medium.com/v2/resize:fit:828/0*2qyq_T4PoQxHVYw9 828w, https://miro.medium.com/v2/resize:fit:1100/0*2qyq_T4PoQxHVYw9 1100w, https://miro.medium.com/v2/resize:fit:2800/0*2qyq_T4PoQxHVYw9 2800w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/0_2qyq_T4PoQxHVYw9.jpg" role="presentation" loading="eager" height="800" width="1400" alt=""></picture><figcaption data-selectable-paragraph="">Hot Springs (via DALL-E 3)</figcaption></figure></div></div><div><h2 data-selectable-paragraph="" id="e5a6">Part One</h2><blockquote><p data-selectable-paragraph="" id="50fa">You finally reach the hot springs! You can see steam rising from secluded areas attached to the primary, ornate building.</p><p data-selectable-paragraph="" id="e670">As you turn to enter, the <a rel="noopener ugc nofollow" href="https://adventofcode.com/2023/day/11" style="color: rgb(76, 112, 240);">researcher</a> stops you. “Wait — I thought you were looking for the hot springs, weren’t you?” You indicate that this definitely looks like hot springs to you.</p><p data-selectable-paragraph="" id="8277">“Oh, sorry, common mistake! This is actually the <a rel="noopener ugc nofollow" href="https://en.wikipedia.org/wiki/Onsen" style="color: rgb(76, 112, 240);">onsen</a>! The hot springs are next door.”</p><p data-selectable-paragraph="" id="291e">You look in the direction the researcher is pointing and suddenly notice the massive metal helixes towering overhead. “This way!”</p><p data-selectable-paragraph="" id="5749">It only takes you a few more steps to reach the main gate of the massive fenced-off area containing the springs. You go through the gate and into a small administrative building.</p><p data-selectable-paragraph="" id="b351">“Hello! What brings you to the hot springs today? Sorry they’re not very hot right now; we’re having a lava shortage at the moment.” You ask about the missing machine parts for Desert Island.</p><p data-selectable-paragraph="" id="aa97">“Oh, all of Gear Island is currently offline! Nothing is being manufactured at the moment, not until we get more lava to heat our forges. And our springs. The springs aren’t very springy unless they’re hot!”</p><p data-selectable-paragraph="" id="56d6">“Say, could you go up and see why the lava stopped flowing? The springs are too cold for normal operation, but we should be able to find one springy enough to launch you up there!”</p><p data-selectable-paragraph="" id="d45e">There’s just one problem — many of the springs have fallen into disrepair, so they’re not actually sure which springs would even be safe to use! Worse yet, their condition records of which springs are damaged (your puzzle input) are also damaged! You’ll need to help them repair the damaged records.</p><p data-selectable-paragraph="" id="937b">In the giant field just outside, the springs are arranged into rows. For each row, the condition records show every spring and whether it is operational (<code>.</code>) or damaged (<code>#</code>). This is the part of the condition records that is itself damaged; for some springs, it is simply unknown (<code>?</code>) whether the spring is operational or damaged.</p><p data-selectable-paragraph="" id="073a">However, the engineer that produced the condition records also duplicated some of this information in a different format! After the list of springs for a given row, the size of each contiguous group of damaged springs is listed in the order those groups appear in the row. This list always accounts for every damaged spring, and each number is the entire size of its contiguous group (that is, groups are always separated by at least one operational spring: <code>####</code> would always be <code>4</code>, never <code>2,2</code>).</p><p data-selectable-paragraph="" id="02f2">So, condition records with no unknown spring conditions might look like this:</p><p data-selectable-paragraph="" id="5221">#.#.### 1,1,3<br>.#...#....###. 1,1,3<br>.#.###.#.###### 1,3,1,6<br>####.#...#... 4,1,1<br>#....######..#####. 1,6,5<br>.###.##....# 3,2,1</p><p data-selectable-paragraph="" id="3998">However, the condition records are partially damaged; some of the springs’ conditions are actually unknown (<code>?</code>). For example:</p><p data-selectable-paragraph="" id="101b">???.### 1,1,3<br>.??..??...?##. 1,1,3<br>?#?#?#?#?#?#?#? 1,3,1,6<br>????.#...#... 4,1,1<br>????.######..#####. 1,6,5<br>?###???????? 3,2,1</p><p data-selectable-paragraph="" id="3b63">Equipped with this information, it is your job to figure out how many different arrangements of operational and broken springs fit the given criteria in each row.</p><p data-selectable-paragraph="" id="42ab">In the first line (<code>???.### 1,1,3</code>), there is exactly one way separate groups of one, one, and three broken springs (in that order) can appear in that row: the first three unknown springs must be broken, then operational, then broken (<code>#.#</code>), making the whole row <code>#.#.###</code>.</p><p data-selectable-paragraph="" id="3b0a">The second line is more interesting: <code>.??..??...?##. 1,1,3</code> could be a total of four different arrangements. The last <code>?</code> must always be broken (to satisfy the final contiguous group of three broken springs), and each <code>??</code>must hide exactly one of the two broken springs. (Neither <code>??</code> could be both broken springs or they would form a single contiguous group of two; if that were true, the numbers afterward would have been <code>2,3</code> instead.) Since each <code>??</code> can either be <code>#.</code> or <code>.#</code>, there are four possible arrangements of springs.</p><p data-selectable-paragraph="" id="7b4b">The last line is actually consistent with ten different arrangements! Because the first number is <code>3</code>, the first and second <code>?</code> must both be <code>.</code> (if either were <code>#</code>, the first number would have to be <code>4</code> or higher). However, the remaining run of unknown spring conditions have many different ways they could hold groups of two and one broken springs:</p><p data-selectable-paragraph="" id="c88d">?###???????? 3,2,1<br>.###.##.#...<br>.###.##..#..<br>.###.##...#.<br>.###.##....#<br>.###..##.#..<br>.###..##..#.<br>.###..##...#<br>.###...##.#.<br>.###...##..#<br>.###....##.#</p><p data-selectable-paragraph="" id="29af">In this example, the number of possible arrangements for each row is:</p><p data-selectable-paragraph="" id="c871"><code>???.### 1,1,3</code> - <code>1</code> arrangement</p><p data-selectable-paragraph="" id="859b"><code>.??..??...?##. 1,1,3</code> - <code>4</code> arrangements</p><p data-selectable-paragraph="" id="0bd6"><code>?#?#?#?#?#?#?#? 1,3,1,6</code> - <code>1</code> arrangement</p><p data-selectable-paragraph="" id="9f4f"><code>????.#...#... 4,1,1</code> - <code>1</code> arrangement</p><p data-selectable-paragraph="" id="13b8"><code>????.######..#####. 1,6,5</code> - <code>4</code> arrangements</p><p data-selectable-paragraph="" id="d594"><code>?###???????? 3,2,1</code> - <code>10</code> arrangements</p><p data-selectable-paragraph="" id="9b02">Adding all of the possible arrangement counts together produces a total of <code>21</code> arrangements.</p><p data-selectable-paragraph="" id="1b89">For each row, count all of the different arrangements of operational and broken springs that meet the given criteria. What is the sum of those counts?</p></blockquote></div><div><p data-selectable-paragraph="" id="0f4b">Man! Another permutation and combination problem! It seems like Santa knows what I used to hate during my engineering days! 🤓</p><p data-selectable-paragraph="" id="07de">So..let’s break the problem down, and try not to get ahead of ourself unlike <a href="https://medium.com/@jatinkrmalik/day-11-cosmic-expansion-advent-of-code-2023-python-6e545dad06bb" rel="noopener" style="color: rgb(76, 112, 240);">Day 11</a>!</p><p data-selectable-paragraph="" id="d57c">In an ideal world, our spring records look something like this:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*HEfawkgl3UkaXOujYeYvhQ.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*HEfawkgl3UkaXOujYeYvhQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*HEfawkgl3UkaXOujYeYvhQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*HEfawkgl3UkaXOujYeYvhQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*HEfawkgl3UkaXOujYeYvhQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*HEfawkgl3UkaXOujYeYvhQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*HEfawkgl3UkaXOujYeYvhQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*HEfawkgl3UkaXOujYeYvhQ.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_HEfawkgl3UkaXOujYeYvhQ.png" role="presentation" loading="eager" height="257" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="fe00">But, since the condition records are partially damaged, some of the springs’ conditions are actually unknown (<code>?</code>):</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*msCo829KuU8oXkABUT8D0w.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*msCo829KuU8oXkABUT8D0w.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*msCo829KuU8oXkABUT8D0w.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*msCo829KuU8oXkABUT8D0w.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*msCo829KuU8oXkABUT8D0w.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*msCo829KuU8oXkABUT8D0w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*msCo829KuU8oXkABUT8D0w.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*msCo829KuU8oXkABUT8D0w.png 640w, https://miro.medium.com/v2/resize:fit:720/1*msCo829KuU8oXkABUT8D0w.png 720w, https://miro.medium.com/v2/resize:fit:750/1*msCo829KuU8oXkABUT8D0w.png 750w, https://miro.medium.com/v2/resize:fit:786/1*msCo829KuU8oXkABUT8D0w.png 786w, https://miro.medium.com/v2/resize:fit:828/1*msCo829KuU8oXkABUT8D0w.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*msCo829KuU8oXkABUT8D0w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*msCo829KuU8oXkABUT8D0w.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_msCo829KuU8oXkABUT8D0w.png" role="presentation" loading="lazy" height="275" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">where `?` denotes the unknown state</figcaption></figure><p data-selectable-paragraph="" id="2645">💡 So, before we start talking about combinations possible and all, I think we should assume the ideal case, and write a simple validator that validates the <code>spring_state</code> (left) with <code>damaged_spring_record</code> (right). And this case be our base case:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*cs0D_12A8fOC34O7FBHgWg.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*cs0D_12A8fOC34O7FBHgWg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*cs0D_12A8fOC34O7FBHgWg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*cs0D_12A8fOC34O7FBHgWg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*cs0D_12A8fOC34O7FBHgWg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*cs0D_12A8fOC34O7FBHgWg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*cs0D_12A8fOC34O7FBHgWg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*cs0D_12A8fOC34O7FBHgWg.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_cs0D_12A8fOC34O7FBHgWg.png" role="presentation" loading="lazy" height="452" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">Quick prototying in REPL</figcaption></figure><p data-selectable-paragraph="" id="9cc7">Here’s our test case:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*6xYRS2whEuMWeyeqQwio_Q.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*6xYRS2whEuMWeyeqQwio_Q.png 640w, https://miro.medium.com/v2/resize:fit:720/1*6xYRS2whEuMWeyeqQwio_Q.png 720w, https://miro.medium.com/v2/resize:fit:750/1*6xYRS2whEuMWeyeqQwio_Q.png 750w, https://miro.medium.com/v2/resize:fit:786/1*6xYRS2whEuMWeyeqQwio_Q.png 786w, https://miro.medium.com/v2/resize:fit:828/1*6xYRS2whEuMWeyeqQwio_Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*6xYRS2whEuMWeyeqQwio_Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*6xYRS2whEuMWeyeqQwio_Q.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_6xYRS2whEuMWeyeqQwio_Q.png" role="presentation" loading="lazy" height="295" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="6a10">And here’s some shabby code just to validate the idea:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*7IpkGhEBWW00mcYWRbWosQ.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*7IpkGhEBWW00mcYWRbWosQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*7IpkGhEBWW00mcYWRbWosQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*7IpkGhEBWW00mcYWRbWosQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*7IpkGhEBWW00mcYWRbWosQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*7IpkGhEBWW00mcYWRbWosQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*7IpkGhEBWW00mcYWRbWosQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*7IpkGhEBWW00mcYWRbWosQ.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_7IpkGhEBWW00mcYWRbWosQ.png" role="presentation" loading="lazy" height="540" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="b39a">Let’s run this, and we can validate that it indeed works!</p><pre><span data-selectable-paragraph="" id="c856">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>✅ OK: #.#.### 1,1,3<br>✅ OK: .#...#....###. 1,1,3<br>✅ OK: .#.###.#.###### 1,3,1,6<br>✅ OK: ####.#...#... 4,1,1<br>✅ OK: #....######..#####. 1,6,5<br>✅ OK: .###.##....# 3,2,1<p>[Done] exited with code=0 in 0.097 seconds</p></span></pre><p data-selectable-paragraph="" id="7f45">So, now that we know the records are not ideal, but indeed damaged and has a lot of unknowns, we will expand the scope of our thinking.</p><p data-selectable-paragraph="" id="a40c">Well, it’s clear that our <code>validate_spring_record(spring_record) bool</code> function will play a pivotal role to solve the problem as for an example row from damaged records:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*yPP9z0Et7UBNJgad-tIfBw.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*yPP9z0Et7UBNJgad-tIfBw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*yPP9z0Et7UBNJgad-tIfBw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*yPP9z0Et7UBNJgad-tIfBw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*yPP9z0Et7UBNJgad-tIfBw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*yPP9z0Et7UBNJgad-tIfBw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*yPP9z0Et7UBNJgad-tIfBw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*yPP9z0Et7UBNJgad-tIfBw.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_yPP9z0Et7UBNJgad-tIfBw.png" role="presentation" loading="lazy" height="213" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">We can use our validator function to help verify correct combinations</figcaption></figure><blockquote><p data-selectable-paragraph="" id="d9d8">Now, to get all possible combinations, we need to consider each <code>?</code> as a place where 2 choices are possible: either <code>.</code> or <code>#</code>. This is a classic problem of combinatorics where each <code>?</code> represents a <strong>binary choice</strong>.</p></blockquote><p data-selectable-paragraph="" id="78a6">In the example row taken above: <code>.??..??…?##.</code> , we have a total of 5 <code>?</code> present, where each can be replaced by <code>.</code> or <code>#</code> so, mathematically speaking, that yields: <strong><em>2⁵ combinations == 32.</em></strong></p><p data-selectable-paragraph="" id="f72b">💭 We can write a function that replaces each <code>?</code> in the record with either <code>.</code> or <code>#</code>, and then calls itself recursively until all <code>?</code> have been replaced, using that we can generate all the combinations!</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*zt0yeaKGXxSM6uAVI9KrNg.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*zt0yeaKGXxSM6uAVI9KrNg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*zt0yeaKGXxSM6uAVI9KrNg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*zt0yeaKGXxSM6uAVI9KrNg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*zt0yeaKGXxSM6uAVI9KrNg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*zt0yeaKGXxSM6uAVI9KrNg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*zt0yeaKGXxSM6uAVI9KrNg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*zt0yeaKGXxSM6uAVI9KrNg.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_zt0yeaKGXxSM6uAVI9KrNg.png" role="presentation" loading="lazy" height="295" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="325a">Let’s do a quick script test?</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*oszF9BgfE6OlziW0E3YOyA.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*oszF9BgfE6OlziW0E3YOyA.png 640w, https://miro.medium.com/v2/resize:fit:720/1*oszF9BgfE6OlziW0E3YOyA.png 720w, https://miro.medium.com/v2/resize:fit:750/1*oszF9BgfE6OlziW0E3YOyA.png 750w, https://miro.medium.com/v2/resize:fit:786/1*oszF9BgfE6OlziW0E3YOyA.png 786w, https://miro.medium.com/v2/resize:fit:828/1*oszF9BgfE6OlziW0E3YOyA.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*oszF9BgfE6OlziW0E3YOyA.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*oszF9BgfE6OlziW0E3YOyA.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_oszF9BgfE6OlziW0E3YOyA.png" role="presentation" loading="lazy" height="984" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">Looks good!</figcaption></figure><p data-selectable-paragraph="" id="7309">Now, all we need to do is:</p><ol><li data-selectable-paragraph="" id="5480">For each <code>spring_state</code> record, generate <code>all_combinations</code></li><li data-selectable-paragraph="" id="0221">For each <code>combination</code> in <code>all_combinations</code>, count <code>validate_spring_record(combination) == true</code></li><li data-selectable-paragraph="" id="85c3">sum(for each count of valid combination)</li><li data-selectable-paragraph="" id="97ca">???</li><li data-selectable-paragraph="" id="b82a">Profit!</li></ol><blockquote><p data-selectable-paragraph="" id="a198">❗️ Disclaimer: I know this is not the most efficient way, but as always, my first approach is to match a solution to a problem and then try to find optimisations! We will probably have to do that as well, as we are currently generating 2^n combinations where the valid combinations will be super low!</p></blockquote><p data-selectable-paragraph="" id="61f1">So, let’s write 👆code:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*m_JTU9Mlkhm02vv22-ZzFw.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*m_JTU9Mlkhm02vv22-ZzFw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*m_JTU9Mlkhm02vv22-ZzFw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*m_JTU9Mlkhm02vv22-ZzFw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*m_JTU9Mlkhm02vv22-ZzFw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*m_JTU9Mlkhm02vv22-ZzFw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*m_JTU9Mlkhm02vv22-ZzFw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*m_JTU9Mlkhm02vv22-ZzFw.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_m_JTU9Mlkhm02vv22-ZzFw.png" role="presentation" loading="lazy" height="290" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="71cb">And let’s run for our base test case as given in the question:</p><pre><span data-selectable-paragraph="" id="fcf3">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>Found 1 valid combinations for ???.### 1,1,3<br>Found 4 valid combinations for .??..??...?##. 1,1,3<br>Found 1 valid combinations for ?#?#?#?#?#?#?#? 1,3,1,6<br>Found 1 valid combinations for ????.#...#... 4,1,1<br>Found 4 valid combinations for ????.######..#####. 1,6,5<br>Found 10 valid combinations for ?###???????? 3,2,1<br>✅ OK - test_sum_spring_record_combinations<p>[Done] exited with code=0 in 0.066 seconds</p></span></pre><p data-selectable-paragraph="" id="4837">Yes!!! Now, let’s load up the puzzle input and try to get an answer? 🤞</p><p data-selectable-paragraph="" id="8190">Ah, well….this might take some time…and…</p><pre><span data-selectable-paragraph="" id="53a8">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>Found 4 valid combinations for .???#??????#. 6,1<br>Found 2 valid combinations for ???##???##?#??#?#..# 1,14,1<br>Found 2 valid combinations for #??????#????#?###?# 3,1,10,1<br>Found 13 valid combinations for .???????#????. 1,2,1,2<br>Found 4 valid combinations for ?##?.??.???.. 3,2,2<br>Found 1 valid combinations for #.?###?#??. 1,5<br>Found 12 valid combinations for ?#??#??????????.??.? 7,2,3,1<br>Found 1 valid combinations for ???###?#.##??? 8,3<br>...<br>1000 lines later<br>...<br>❗️ Total valid combinations: XXXX<p>[Done] exited with code=0 in 49.445 seconds</p></span></pre><p data-selectable-paragraph="" id="a2b7">Not bad! An answer in <code>49.445</code> seconds shall be considered a win comapred to last few days!</p><p data-selectable-paragraph="" id="25f9">Let’s see if this is the corect answers?</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*a3NavRUiuC2ujHUK9wXbRw.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*a3NavRUiuC2ujHUK9wXbRw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*a3NavRUiuC2ujHUK9wXbRw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*a3NavRUiuC2ujHUK9wXbRw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*a3NavRUiuC2ujHUK9wXbRw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*a3NavRUiuC2ujHUK9wXbRw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*a3NavRUiuC2ujHUK9wXbRw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*a3NavRUiuC2ujHUK9wXbRw.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_a3NavRUiuC2ujHUK9wXbRw.png" role="presentation" loading="lazy" height="78" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">YASS!</figcaption></figure><p data-selectable-paragraph="" id="2c68">Here’s my code till now:</p><pre><span data-selectable-paragraph="" id="13b7"># Day 12: Hot Springs<p>from enum import Enum</p><p>class SpringState(Enum):<br>    OPERATIONAL = "."<br>    DAMAGED = "#"<br>    UNKNOWN = "?"</p><p>def generate_spring_record_combinations(spring_record, index=0):<br>    if index &gt;= len(spring_record):<br>        return [spring_record]</p><p>    if spring_record[index] == SpringState.UNKNOWN.value:<br>        # replace '?' with '.' and combine results<br>        with_operational = generate_spring_record_combinations(<br>            spring_record[:index]<br>            + SpringState.OPERATIONAL.value<br>            + spring_record[index + 1 :],<br>            index + 1,<br>        )<br>        # replace '?' with '#' and combine results<br>        with_damaged = generate_spring_record_combinations(<br>            spring_record[:index]<br>            + SpringState.DAMAGED.value<br>            + spring_record[index + 1 :],<br>            index + 1,<br>        )<br>        return with_operational + with_damaged<br>    else:<br>        # continue recursion for next index<br>        return generate_spring_record_combinations(spring_record, index + 1)</p><p>def validate_spring_record(spring_state, damaged_spring_record):<br>    damaged_spring_record = damaged_spring_record.split(",")<br>    spring_state = list(spring_state)</p><p>    replica_damaged_spring_record = []<br>    damaged_count = 0<br>    for spring in spring_state:<br>        if spring == SpringState.DAMAGED.value:<br>            damaged_count += 1<br>        else:<br>            if damaged_count &gt; 0:<br>                replica_damaged_spring_record.append(str(damaged_count))<br>                damaged_count = 0</p><p>    if damaged_count &gt; 0:<br>        replica_damaged_spring_record.append(str(damaged_count))</p><p>    return replica_damaged_spring_record == damaged_spring_record</p><p>def sum_spring_record_combinations(spring_condition_records):<br>    total_combinations = 0<br>    for spring_record in spring_condition_records.splitlines():<br>        spring_state, damaged_spring_record = spring_record.split()<br>        combinations = generate_spring_record_combinations(spring_state)<br>        valid_combinations_length = len(<br>            [<br>                c for c in combinations<br>                if validate_spring_record(c, damaged_spring_record)<br>            ]<br>        )<br>        print(f"Found {valid_combinations_length} valid combinations for {spring_record}")<br>        total_combinations += valid_combinations_length<br>    return total_combinations</p><p>def part_one():<br>    with open("day_12/input.txt") as f:<br>        spring_condition_records = f.read()<br>    sum = sum_spring_record_combinations(spring_condition_records)<br>    print(f"❗️ Total valid combinations: {sum}")</p><p>def test_sum_spring_record_combinations():<br>    spring_condition_records = """???.### 1,1,3<br>.??..??...?##. 1,1,3<br>?#?#?#?#?#?#?#? 1,3,1,6<br>????.#...#... 4,1,1<br>????.######..#####. 1,6,5<br>?###???????? 3,2,1"""<br>    sum = sum_spring_record_combinations(spring_condition_records)<br>    assert sum == 21, f"❌ Expected: 21, Actual: {sum}"<br>    print("✅ OK - test_sum_spring_record_combinations")</p><p>def test_validate_spring_record_ideal():<br>    ideal_spring_condition_records = """#.#.### 1,1,3<br>.#...#....###. 1,1,3<br>.#.###.#.###### 1,3,1,6<br>####.#...#... 4,1,1<br>#....######..#####. 1,6,5<br>.###.##....# 3,2,1<br>"""<br>    for spring_record in ideal_spring_condition_records.splitlines():<br>        spring_state, damaged_spring_record = spring_record.split()<br>        ok = validate_spring_record(spring_state, damaged_spring_record)<br>        assert ok, f"❌ Expected: True, Actual: {ok}"<br>        print(f"✅ OK: {spring_record}")<br>    print("✅ OK - test_validate_spring_record_ideal")</p><p>if __name__ == "__main__":<br>    # test_validate_spring_record_ideal()<br>    test_sum_spring_record_combinations()<br>    part_one()</p></span></pre><blockquote><p data-selectable-paragraph="" id="9173">I am aware that we have a lot of wasted compute that we can optimise here, but let’s move on to part 2 as that usually changes the requirements drastically and then we will combine refactor our code.</p></blockquote></div><div><h2 data-selectable-paragraph="" id="9234">Part Two</h2><blockquote><p data-selectable-paragraph="" id="8e94">As you look out at the field of springs, you feel like there are way more springs than the condition records list. When you examine the records, you discover that they were actually folded up this whole time!</p><p data-selectable-paragraph="" id="46d7">To unfold the records, on each row, replace the list of spring conditions with five copies of itself (separated by <code>?</code>) and replace the list of contiguous groups of damaged springs with five copies of itself (separated by <code>,</code>).</p><p data-selectable-paragraph="" id="efba">So, this row:</p><p data-selectable-paragraph="" id="19f6">.# 1</p><p data-selectable-paragraph="" id="ee22">Would become:</p><p data-selectable-paragraph="" id="352c">.#?.#?.#?.#?.# 1,1,1,1,1</p><p data-selectable-paragraph="" id="c6e9">The first line of the above example would become:</p><p data-selectable-paragraph="" id="58d5">???.###????.###????.###????.###????.### 1,1,3,1,1,3,1,1,3,1,1,3,1,1,3</p><p data-selectable-paragraph="" id="f55c">In the above example, after unfolding, the number of possible arrangements for some rows is now much larger:</p><p data-selectable-paragraph="" id="3b1d"><code>???.### 1,1,3</code> - <code>1</code> arrangement</p><p data-selectable-paragraph="" id="848c"><code>.??..??...?##. 1,1,3</code> - <code>16384</code> arrangements</p><p data-selectable-paragraph="" id="4d9e"><code>?#?#?#?#?#?#?#? 1,3,1,6</code> - <code>1</code> arrangement</p><p data-selectable-paragraph="" id="81e0"><code>????.#...#... 4,1,1</code> - <code>16</code> arrangements</p><p data-selectable-paragraph="" id="220b"><code>????.######..#####. 1,6,5</code> - <code>2500</code> arrangements</p><p data-selectable-paragraph="" id="5aaf"><code>?###???????? 3,2,1</code> - <code>506250</code> arrangements</p><p data-selectable-paragraph="" id="f85d">After unfolding, adding all of the possible arrangement counts together produces <code>525152</code>.</p><p data-selectable-paragraph="" id="3236">Unfold your condition records; what is the new sum of possible arrangement counts?</p></blockquote></div><div><p data-selectable-paragraph="" id="31c6">Aha! Told you. So, now conviniently, springs were actually <strong>folded up </strong>this whole time!</p><p data-selectable-paragraph="" id="b348">To unfold the sequence, we just need to <code>5x</code> each row of the record, for example:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*s4MTuZ3zRalGpICJhrhfJQ.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*s4MTuZ3zRalGpICJhrhfJQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*s4MTuZ3zRalGpICJhrhfJQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*s4MTuZ3zRalGpICJhrhfJQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*s4MTuZ3zRalGpICJhrhfJQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*s4MTuZ3zRalGpICJhrhfJQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*s4MTuZ3zRalGpICJhrhfJQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*s4MTuZ3zRalGpICJhrhfJQ.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_s4MTuZ3zRalGpICJhrhfJQ.png" role="presentation" loading="eager" height="148" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="1e8a">Clearly, our inefficient code will now not work, as our possible combinations will increase exponentially!</p><blockquote><p data-selectable-paragraph="" id="4634">💡Well, one simple way I can see to reduce computations is to:</p><p data-selectable-paragraph="" id="5386">- just integrate the validation logic directly into the combination generation process</p><p data-selectable-paragraph="" id="f6b5">- instead of store all the combinations and then computing length, we can just return the <strong>valid</strong> number of combinations.</p></blockquote><p data-selectable-paragraph="" id="f7e3">This way, we only generate valid combinations from the start, significantly reducing the number of combinations we need to handle.</p><p data-selectable-paragraph="" id="8f47">Updating code for that, let’s run it!</p><pre><span data-selectable-paragraph="" id="a7aa">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>✅ OK - test_sum_spring_record_combinations<br>❗️ Total valid combinations: 7599<p>[Done] exited with code=0 in 48.915 seconds</p></span></pre><p data-selectable-paragraph="" id="e816">And it saved us a grand total of <code>49.445–48.915 = <strong>~530 ms</strong></code><strong> 😂</strong></p><figure><figcaption><strong>~530ms</strong></figcaption></figure><p data-selectable-paragraph="" id="078c">Breaking down the computation, it’s clear that we are <strong>spending a lot of time in</strong> generating “all” the possible combinations of the record. Since we already have the <code>damaged_spring_record</code>, we should be able to use it to basically just generate correct combinations? Or at the least, do an <strong>early return</strong> for the all incorrect ones! 🤔</p><blockquote><p data-selectable-paragraph="" id="e1fe">The complexity of this problem lies in correctly interpreting the ‘?’ characters while adhering to the constraints set by the <strong><em>damaged_spring_record</em></strong>.</p></blockquote><p data-selectable-paragraph="" id="62bb">.</p><p data-selectable-paragraph="" id="fd2b">.</p><p data-selectable-paragraph="" id="8bb7">.</p><p data-selectable-paragraph="" id="5735">💡 We need to find a way to <strong>prune of our search space early</strong> when a rule from <code>damaged_spring_record</code> is violated in our recursive process itself! Let’s write our early return conditions using our record while navigating through all possible combinations in our recursive function:</p><ul><li data-selectable-paragraph="" id="65a8">If the <code>damaged_spring_record</code> is empty, <br>- if any spring is damaged: return <code>0</code> <br>- else, return <code>1</code>.</li><li data-selectable-paragraph="" id="5185">If the <code>spring_state</code> string is empty, <br>- if there are no damaged spring records left to process: return <code>1</code><br>- else, return <code>0</code>.</li><li data-selectable-paragraph="" id="ff17">recursively check each spring state and calculate the total number of valid combinations based on whether the current spring is operational, damaged, or unknown.</li></ul><p data-selectable-paragraph="" id="0f81">And since now alot of search space will have repeated calculations, we can use <code>@cache</code> decorator from <code>functools</code> to memoize the results of the recursive function <code>get_valid_spring_record_combinations</code> in an LRU cache with no size limit!</p><blockquote><p data-selectable-paragraph="" id="4e7b">Python does make caching absolutely simple with these nifty OOTB decorators! 🤌</p></blockquote><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SOZFKjkeUP6fDZF42V4Ffw.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*SOZFKjkeUP6fDZF42V4Ffw.png 640w, https://miro.medium.com/v2/resize:fit:720/1*SOZFKjkeUP6fDZF42V4Ffw.png 720w, https://miro.medium.com/v2/resize:fit:750/1*SOZFKjkeUP6fDZF42V4Ffw.png 750w, https://miro.medium.com/v2/resize:fit:786/1*SOZFKjkeUP6fDZF42V4Ffw.png 786w, https://miro.medium.com/v2/resize:fit:828/1*SOZFKjkeUP6fDZF42V4Ffw.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*SOZFKjkeUP6fDZF42V4Ffw.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*SOZFKjkeUP6fDZF42V4Ffw.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_SOZFKjkeUP6fDZF42V4Ffw.png" role="presentation" loading="lazy" height="330" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="e5b2">And here, our <code>is_valid_condition</code> would look like:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*9jeKFExvbHulJLyT9qmFQQ.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*9jeKFExvbHulJLyT9qmFQQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*9jeKFExvbHulJLyT9qmFQQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*9jeKFExvbHulJLyT9qmFQQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*9jeKFExvbHulJLyT9qmFQQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*9jeKFExvbHulJLyT9qmFQQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*9jeKFExvbHulJLyT9qmFQQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*9jeKFExvbHulJLyT9qmFQQ.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_9jeKFExvbHulJLyT9qmFQQ.png" role="presentation" loading="lazy" height="235" width="700" alt=""></picture></div></figure><p data-selectable-paragraph="" id="e5f8">❗️ Here, <code>_is_valid_condition</code> returns a boolean value that indicates whether the given <code>spring_state</code> and <code>damaged_spring_record</code> meet the following conditions:</p><ol><li data-selectable-paragraph="" id="6f5e">The first element of <code>damaged_spring_record</code> (which represents the number of damaged springs in the first group) is less than or equal to the length of <code>spring_state</code>. This ensures that there are enough springs in <code>spring_state</code> to account for the first group of damaged springs.</li><li data-selectable-paragraph="" id="6a7d">All springs in <code>spring_state</code> up to the index equal to the first element of <code>damaged_spring_record</code> are not operational. This is checked by ensuring that the <code>OPERATIONAL</code> value of the <code>SpringState</code> Enum is not found in the substring of <code>spring_state</code> that ends at the index equal to the first element of <code>damaged_spring_record</code>.</li><li data-selectable-paragraph="" id="2b09">Either the first element of <code>damaged_spring_record</code> is equal to the length of <code>spring_state</code> (which means that all springs are damaged), or the spring at the index equal to the first element of <code>damaged_spring_record</code> is not damaged. This ensures that there is no damaged spring immediately after the first group of damaged springs.</li></ol><p data-selectable-paragraph="" id="b080">Let’s run this code for our base test case of part 1:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 640w, https://miro.medium.com/v2/resize:fit:720/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 720w, https://miro.medium.com/v2/resize:fit:750/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 750w, https://miro.medium.com/v2/resize:fit:786/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 786w, https://miro.medium.com/v2/resize:fit:828/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*Hw9kB_F1vPM-PDxQxMNqwQ.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_Hw9kB_F1vPM-PDxQxMNqwQ.png" role="presentation" loading="lazy" height="272" width="700" alt=""></picture></div></figure><pre><span data-selectable-paragraph="" id="05b0">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>✅ OK - test_sum_spring_record_combinations<p>[Done] exited with code=0 in 0.109 seconds</p></span></pre><p data-selectable-paragraph="" id="f833">And puzzle input for part 1:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*R7ko8-beeAmE7h8LOHK8ig.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*R7ko8-beeAmE7h8LOHK8ig.png 640w, https://miro.medium.com/v2/resize:fit:720/1*R7ko8-beeAmE7h8LOHK8ig.png 720w, https://miro.medium.com/v2/resize:fit:750/1*R7ko8-beeAmE7h8LOHK8ig.png 750w, https://miro.medium.com/v2/resize:fit:786/1*R7ko8-beeAmE7h8LOHK8ig.png 786w, https://miro.medium.com/v2/resize:fit:828/1*R7ko8-beeAmE7h8LOHK8ig.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*R7ko8-beeAmE7h8LOHK8ig.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*R7ko8-beeAmE7h8LOHK8ig.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_R7ko8-beeAmE7h8LOHK8ig.png" role="presentation" loading="lazy" height="273" width="700" alt=""></picture></div></figure><pre><span data-selectable-paragraph="" id="23de">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>❗️ Total valid combinations: XXXX<p>[Done] exited with code=0 in 0.134 seconds</p></span></pre><p data-selectable-paragraph="" id="72c2">Wow! We get the correct answer in just <code><strong>0.134 seconds</strong></code><strong> </strong>compare this to our previous brute force approach that took <code><strong>~49 seconds</strong></code><strong> 😯</strong></p><p data-selectable-paragraph="" id="4357">Now, let’s also write our base test case for part 2, where all we need to do is, just increase our input per <code>spring_record * 5</code> :</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*1tR0tV2M9F1FkhO9YmgEhg.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*1tR0tV2M9F1FkhO9YmgEhg.png 640w, https://miro.medium.com/v2/resize:fit:720/1*1tR0tV2M9F1FkhO9YmgEhg.png 720w, https://miro.medium.com/v2/resize:fit:750/1*1tR0tV2M9F1FkhO9YmgEhg.png 750w, https://miro.medium.com/v2/resize:fit:786/1*1tR0tV2M9F1FkhO9YmgEhg.png 786w, https://miro.medium.com/v2/resize:fit:828/1*1tR0tV2M9F1FkhO9YmgEhg.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*1tR0tV2M9F1FkhO9YmgEhg.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*1tR0tV2M9F1FkhO9YmgEhg.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_1tR0tV2M9F1FkhO9YmgEhg.png" role="presentation" loading="lazy" height="256" width="700" alt=""></picture></div></figure><pre><span data-selectable-paragraph="" id="d362">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>✅ OK - test_sum_unfolded_spring_record_combinations<p>[Done] exited with code=0 in 0.11 seconds</p></span></pre><p data-selectable-paragraph="" id="ab3f">Phew! And now let’s do it for part 2, puzzle input:</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*KwV2lKEhMMicGv2y4jS69Q.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*KwV2lKEhMMicGv2y4jS69Q.png 640w, https://miro.medium.com/v2/resize:fit:720/1*KwV2lKEhMMicGv2y4jS69Q.png 720w, https://miro.medium.com/v2/resize:fit:750/1*KwV2lKEhMMicGv2y4jS69Q.png 750w, https://miro.medium.com/v2/resize:fit:786/1*KwV2lKEhMMicGv2y4jS69Q.png 786w, https://miro.medium.com/v2/resize:fit:828/1*KwV2lKEhMMicGv2y4jS69Q.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*KwV2lKEhMMicGv2y4jS69Q.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*KwV2lKEhMMicGv2y4jS69Q.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_KwV2lKEhMMicGv2y4jS69Q.png" role="presentation" loading="lazy" height="316" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">* 5 for unfolding ꩜</figcaption></figure><pre><span data-selectable-paragraph="" id="4258">[Running] python3 "/Users/jmalik/github/advent-of-code-2023/day_12/hot_springs.py"<br>❗️ Total valid combinations: XXXXXXXXXXXXX<p>[Done] exited with code=0 in 0.693 seconds</p></span></pre><p data-selectable-paragraph="" id="ceae"><strong>Yes! Look at that runtime! 🚀</strong></p><p data-selectable-paragraph="" id="3364">Let’s put this answer in the text box? And…</p><figure><div tabindex="0" role="button"><picture><source type="image/webp" sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 640w, https://miro.medium.com/v2/resize:fit:720/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 720w, https://miro.medium.com/v2/resize:fit:750/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 750w, https://miro.medium.com/v2/resize:fit:786/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 786w, https://miro.medium.com/v2/resize:fit:828/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 828w, https://miro.medium.com/v2/resize:fit:1100/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/format:webp/1*HfuXqBmUaJQdhPzx1YC98w.png 1400w"><source sizes="(min-resolution: 4dppx) and (max-width: 700px) 50vw, (-webkit-min-device-pixel-ratio: 4) and (max-width: 700px) 50vw, (min-resolution: 3dppx) and (max-width: 700px) 67vw, (-webkit-min-device-pixel-ratio: 3) and (max-width: 700px) 65vw, (min-resolution: 2.5dppx) and (max-width: 700px) 80vw, (-webkit-min-device-pixel-ratio: 2.5) and (max-width: 700px) 80vw, (min-resolution: 2dppx) and (max-width: 700px) 100vw, (-webkit-min-device-pixel-ratio: 2) and (max-width: 700px) 100vw, 700px" srcset="https://miro.medium.com/v2/resize:fit:640/1*HfuXqBmUaJQdhPzx1YC98w.png 640w, https://miro.medium.com/v2/resize:fit:720/1*HfuXqBmUaJQdhPzx1YC98w.png 720w, https://miro.medium.com/v2/resize:fit:750/1*HfuXqBmUaJQdhPzx1YC98w.png 750w, https://miro.medium.com/v2/resize:fit:786/1*HfuXqBmUaJQdhPzx1YC98w.png 786w, https://miro.medium.com/v2/resize:fit:828/1*HfuXqBmUaJQdhPzx1YC98w.png 828w, https://miro.medium.com/v2/resize:fit:1100/1*HfuXqBmUaJQdhPzx1YC98w.png 1100w, https://miro.medium.com/v2/resize:fit:1400/1*HfuXqBmUaJQdhPzx1YC98w.png 1400w" data-testid="og"><img src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/1_HfuXqBmUaJQdhPzx1YC98w.png" role="presentation" loading="lazy" height="104" width="700" alt=""></picture></div><figcaption data-selectable-paragraph="">💥</figcaption></figure><p data-selectable-paragraph="" id="d854">Here’s our super optimised code till now, I am not doing object oriented for this one! :P</p><pre><span data-selectable-paragraph="" id="f7f9">from enum import Enum<br>from functools import cache<p>class SpringState(Enum):<br>    OPERATIONAL = "."<br>    DAMAGED = "#"<br>    UNKNOWN = "?"</p><p>@cache<br>def get_valid_spring_record_combinations(spring_state, damaged_spring_record):<br>    if not damaged_spring_record:<br>        if SpringState.DAMAGED.value in spring_state:<br>            return 0<br>        else:<br>            return 1</p><p>    if not spring_state:<br>        if not damaged_spring_record:<br>            return 1<br>        else:<br>            return 0</p><p>    total_combinations = 0</p><p>    # if "." or "?"<br>    if spring_state[0] in [SpringState.OPERATIONAL.value, SpringState.UNKNOWN.value]:<br>        total_combinations += get_valid_spring_record_combinations(<br>            spring_state[1:], damaged_spring_record<br>        )</p><p>    # if "#" or "?"<br>    if spring_state[0] in [SpringState.DAMAGED.value, SpringState.UNKNOWN.value]:<br>        if is_valid_condition(spring_state, damaged_spring_record):<br>            total_combinations += get_valid_spring_record_combinations(<br>                spring_state[damaged_spring_record[0] + 1 :], damaged_spring_record[1:]<br>            )</p><p>    return total_combinations</p><p>def is_valid_condition(spring_state, damaged_spring_record):<br>    return (<br>        damaged_spring_record[0] &lt;= len(spring_state)<br>        and SpringState.OPERATIONAL.value<br>        not in spring_state[: damaged_spring_record[0]]<br>        and (<br>            damaged_spring_record[0] == len(spring_state)<br>            or spring_state[damaged_spring_record[0]] != SpringState.DAMAGED.value<br>        )<br>    )</p><p>def sum_spring_record_combinations(spring_condition_records):<br>    total_combinations = 0<br>    for spring_record in spring_condition_records.splitlines():<br>        spring_state, damaged_spring_record = spring_record.split()<br>        damaged_spring_record = tuple(map(int, damaged_spring_record.split(",")))<br>        total_combinations += get_valid_spring_record_combinations(<br>            spring_state, damaged_spring_record<br>        )</p><p>    return total_combinations</p><p>def part_one():<br>    with open("day_12/input.txt") as f:<br>        spring_condition_records = f.read()<br>    sum = sum_spring_record_combinations(spring_condition_records)<br>    print(f"❗️ Total valid combinations: {sum}")</p><p>def sum_spring_record_combinations_unfold(spring_condition_records):<br>    total_combinations = 0<br>    for spring_record in spring_condition_records.splitlines():<br>        spring_state, damaged_spring_record = spring_record.split()<br>        damaged_spring_record = tuple(map(int, damaged_spring_record.split(",")))<br>        spring_state = "?".join([spring_state] * 5)  # unfolding<br>        damaged_spring_record = damaged_spring_record * 5  # unfolding<br>        total_combinations += get_valid_spring_record_combinations(<br>            spring_state, damaged_spring_record<br>        )</p><p>    return total_combinations</p><p>def part_two():<br>    with open("day_12/input.txt") as f:<br>        spring_condition_records = f.read()<br>    sum = sum_spring_record_combinations_unfold(spring_condition_records)<br>    print(f"❗️ Total valid combinations: {sum}")</p><p>def test_sum_spring_record_combinations():<br>    spring_condition_records = """???.### 1,1,3<br>.??..??...?##. 1,1,3<br>?#?#?#?#?#?#?#? 1,3,1,6<br>????.#...#... 4,1,1<br>????.######..#####. 1,6,5<br>?###???????? 3,2,1"""<br>    sum = sum_spring_record_combinations(spring_condition_records)<br>    assert sum == 21, f"❌ Expected: 21, Actual: {sum}"<br>    print("✅ OK - test_sum_spring_record_combinations")</p><p>def test_sum_unfolded_spring_record_combinations():<br>    spring_condition_records = """???.### 1,1,3<br>.??..??...?##. 1,1,3<br>?#?#?#?#?#?#?#? 1,3,1,6<br>????.#...#... 4,1,1<br>????.######..#####. 1,6,5<br>?###???????? 3,2,1"""<br>    sum = sum_spring_record_combinations_unfold(spring_condition_records)<br>    assert sum == 525152, f"❌ Expected: 525152, Actual: {sum}"<br>    print("✅ OK - test_sum_unfolded_spring_record_combinations")</p><p>if __name__ == "__main__":<br>    test_sum_spring_record_combinations()<br>    part_one()</p><p>    test_sum_unfolded_spring_record_combinations()<br>    part_two()</p></span></pre></div><div><p data-selectable-paragraph="" id="956b">Man! I am learning so much with <strong>#AdventOfCode2023</strong>, it’s beautiful that I am getting to revisit a lot of my engineering days concepts that I don’t get to use in my day to day work while building CRUD apps! 🤓</p><p data-selectable-paragraph="" id="73cc">Onto the next day then?!</p></div><div><p data-selectable-paragraph="" id="32ba">p.s: I am deliberating <strong>not adding answers</strong> here so you can actually spend some time trying to understand how we solved the problem!</p><p data-selectable-paragraph="" id="e03b">Feel free to checkout code on my Github repo and try to set it up and run on your machine 👇</p></div></div></article></div></article>
<script src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/client" async=""></script><div><div class="grecaptcha-badge" data-style="bottomright" style="width: 256px; height: 60px; display: block; transition: right 0.3s ease 0s; position: fixed; bottom: 14px; right: -186px; box-shadow: gray 0px 0px 5px; border-radius: 2px; overflow: hidden;"><div class="grecaptcha-logo"><iframe title="reCAPTCHA" width="256" height="60" role="presentation" name="a-dfvpgjn1rq5n" frameborder="0" scrolling="no" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/anchor.html"></iframe></div><div class="grecaptcha-error"></div><textarea id="g-recaptcha-response-100000" name="g-recaptcha-response" class="g-recaptcha-response" style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea></div><iframe style="display: none;" src="./[Day 12] Hot Springs __ Advent of Code 2023 (Python) _ by Jatin K Malik _ Medium_files/saved_resource(1).html"></iframe></div></body></html>